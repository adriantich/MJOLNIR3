% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mjolnir8_RAGNAROC.R
\name{mjolnir8_RAGNAROC}
\alias{mjolnir8_RAGNAROC}
\title{RAGNAROC: Replace AGnomens with Names And Recover Original Codification}
\usage{
mjolnir8_RAGNAROC(
  lib,
  metadata_table = "",
  output_file = "",
  output_file_ESV = "",
  min_reads = 2,
  min_relative = 1/50000,
  remove_bacteria = T,
  remove_contamination = F,
  contamination_file = "contaminants.txt",
  ESV_within_MOTU = T,
  blank_col = "BLANK",
  blank_tag = T,
  remove_numts = F,
  cores = 1,
  blank_relative = 0.1
)
}
\arguments{
\item{lib}{Character string. Acronym for the experiment. This
acronym must be of 4 characters in capital letters. Do not mix up library and
experiment acronyms. However they can be the same.}

\item{metadata_table}{tsv table. if not specified, the file must be named 
<EXPX>_metadata.tsv. This table must have: a column named "mjolnir_agnomens"
with the names given to the samples during the pipeline in FREYJA; a column 
named "original_samples" with the samples names that will be given to the 
samples at the end of the pipeline; and a column with the name specified in
in the "blank_col" parameter ("BLANK" by default) where blanks, negatives and
controls are tagged with a flag specified in the "blank_tag" parameter (T by
default).}

\item{output_file}{Character string specifying the outputfile name}

\item{output_file_ESV}{Character string specifying the outputfile name 
for ESVs abundances if required.}

\item{min_reads}{Number of the minimum number of reads allowed for each MOTU/ESV
or ESV within MOTU.}

\item{min_relative}{Number of the minimum relative abundance for a unit in the
sample to be retained.}

\item{remove_bacteria}{Logical. If TRUE it will apply the bacteria removal 
filtering (see Details).}

\item{remove_contamination}{Logical. If TRUE it will apply the contamination removal 
filtering (see Details).}

\item{contamination_file}{Character string specifying the name of the contamination file. (see Details)}

\item{ESV_within_MOTU}{Logical. If TRUE this will take into account the ESV 
that were clustered into MOTUs in ODIN if algorithm was set to "DnoisE_SWARM" 
or "SWARM_DnoisE" and apply all filters to both data.}

\item{blank_col}{Column name of the blank column in the "metadata_table"}

\item{blank_tag}{Unique flag to tag the samples that are blank/neg/controls 
in the "blank_col"}

\item{remove_numts}{Logical whether to apply the NUMT filter (TRUE) or not (FALSE)}

\item{cores}{Numeric. Number of threads for parallel processing during NUMT 
removal.}

\item{blank_relative}{Relative abundance threshold for a unit to be removed if the 
total abundance in the blank/neg/control is higher than this value in terms of
relative abundance of the total reads in all samples (see Details).}
}
\description{
Final step of the MJOLNIR3 pipeline to apply the last filters to the abundance data
}
\details{
RAGNAROC consists on different contamination removals and filtering steps 
as follows:

Removal of Bacteria: this removed the Units tagged as "Prokaryota" or "root" in the <EXPX>_LOKI_Cutated.tsv

Removal of contaminations: this step removes the taxa specified in the "contaminaion_file"

Blank filter: remove any MOTU for which abundance in the blank or negative 
controls is higher than "blank_relative" of its total read abundance
and remove blank and NEG samples

Minimum relative abundance filter: Apply a minimum relative abundance 
threshold for each sample, setting to zero any abundance below "min_relative" 
of the total reads of this sample. It also applies a "min_reads" filter

NUMT removal: this step is design for the Leray-XT COI marker. It deletes all
sequences that do not have a 313 (plus/minus multiple of 3 equivalent to a codon)
bp length. Then removes sequences with stop codons and those metazoan 
sequences that do not translate for 5 specific conservative aminoacids.
}
\examples{
library(mjolnir)

# Define input fastq files (only names of R1 files are needed)
R1_filenames <-c("ULO1_R1.fastq.gz","ULO2_R1.fastq.gz","ULO3_R1.fastq.gz","ULO4_R1.fastq.gz")

# Input identifiers for the individual libraries to be used. It should be a 4-character name, matching the information in the ngsfilter files
lib_prefixes <- c("ULO1","ULO2","ULO3","ULO4")

# Enter number of cores to be used in parallel. 
cores <- 7

# Run RAN
mjolnir1_RAN(R1_filenames,cores,lib_prefixes,R1_motif="_R1",R2_motif="_R2")

# set experiment acronym
lib <- "ULOY"

# Run FREYJA
mjolnir2_FREYJA(lib_prefix = lib_prefixes,lib = lib,cores = cores,Lmin=299,Lmax=320)

# set the maximum number of cores possible
cores <- 16

# Run HELA
mjolnir3_HELA(lib,cores)

# Run ODIN
mjolnir4_ODIN(lib,cores,d=13,min_reads_MOTU=2,min_reads_ESV=2,alpha=5,entropy=c(0.47,0.23,1.02,313), algorithm="DnoisE_SWARM", remove_singletons = TRUE)

# set the directory where the database is stored
tax_dir <- "~/taxo_NCBI/"
tax_dms_name <- "DUFA_COI"

# Run THOR
mjolnir5_THOR(lib, cores, tax_dir=tax_dir, tax_dms_name=tax_dms_name, run_ecotag=T)

# Run FRIGGA
mjolnir6_FRIGGA(lib)

# Run LOKI
mjolnir7_LOKI(lib, min_id=.84)

# Run RAGNAROC
mjolnir8_RAGNAROC(lib,min_reads=2,min_relative=1/50000,remove_bacteria=T,remove_contamination=F,ESV_within_MOTU=T,blank_col="BLANK",blank_tag=T,remove_numts=F,cores=1,blank_relative=0.1)
}
