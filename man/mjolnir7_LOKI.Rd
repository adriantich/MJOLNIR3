% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mjolnir7_LOKI.R
\name{mjolnir7_LOKI}
\alias{mjolnir7_LOKI}
\title{LOKI: LULU Overseeing with Kinship Identification}
\usage{
mjolnir7_LOKI(lib, min_id = 0.84, vsearchpath = NULL)
}
\arguments{
\item{lib}{Character string. Acronym for the experiment. This
acronym must be of 4 characters in capital letters. Do not mix up library and
experiment acronyms. However they can be the same.}

\item{min_id}{Numeric. Equivalent to the --id option from vsearch --usearch_global

From vsearch manual: Reject the sequence match if the pairwise identity is 
lower than min_id (value ranging from 0.0 to 1.0 included). The search process 
sorts target sequences by decreasing number of k-mers they hav e in common 
with the query sequence, using that information as a proxy for sequence 
similarity. That efficient pre-filtering also prevents pairwise alignments 
with weakly matching targets, as there needs to be at least 6 shared kmers 
to start the pairwise alignment, and at least one out of every 16 k-mers 
from the query needs to match the target. Consequently, using values lower 
than --id 0.5 is not likely to capture more weakly matching targets. The 
pairwise identity is by default defined as the number of 
(matching columns) / (alignment length - terminal gaps)}

\item{vsearchpath}{Character string specifying the PATH to vsearch.}
}
\description{
LOKI is a convenient wrapper of LULU for the MJOLNIR3 metabarcoding pipeline.
}
\details{
LOKI starts from the combined dataset of abundances and taxonomy from the 
previous step (FRIGGA): <EXPX>_FRIGGA.tsv.
A match list of representative MOTU sequences is created using VSEARCH and saved as a txt file.
Then Units that are potential errors based on co-occurrence patterns
are labelled and removed using LULU.
The output is called <EXPX>_LOKI_Curated.tsv
}
\examples{
library(mjolnir)

# Define input fastq files (only names of R1 files are needed)
R1_filenames <-c("ULO1_R1.fastq.gz","ULO2_R1.fastq.gz","ULO3_R1.fastq.gz","ULO4_R1.fastq.gz")

# Input identifiers for the individual libraries to be used. It should be a 4-character name, matching the information in the ngsfilter files
lib_prefixes <- c("ULO1","ULO2","ULO3","ULO4")

# Enter number of cores to be used in parallel. 
cores <- 7

# Run RAN
mjolnir1_RAN(R1_filenames,cores,lib_prefixes,R1_motif="_R1",R2_motif="_R2")

# set experiment acronym
lib <- "ULOY"

# Run FREYJA
mjolnir2_FREYJA(lib_prefix = lib_prefixes,lib = lib,cores = cores,Lmin=299,Lmax=320)

# set the maximum number of cores possible
cores <- 16

# Run HELA
mjolnir3_HELA(lib,cores)

# Run ODIN
mjolnir4_ODIN(lib,cores,d=13,min_reads_MOTU=2,min_reads_ESV=2,alpha=5,entropy=c(0.47,0.23,1.02,313), algorithm="DnoisE_SWARM", remove_singletons = TRUE)

# set the directory where the database is stored
tax_dir <- "~/taxo_NCBI/"
tax_dms_name <- "DUFA_COI"

# Run THOR
mjolnir5_THOR(lib, cores, tax_dir=tax_dir, tax_dms_name=tax_dms_name, run_ecotag=T)

# Run FRIGGA
mjolnir6_FRIGGA(lib)

# Run LOKI
mjolnir7_LOKI(lib, min_id=.84)
}
